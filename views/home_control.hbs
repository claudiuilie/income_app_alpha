
<div class="container">
    <header class="masthead bg-white text-white text-center" style="padding-top: 7em;padding-bottom: 2em;">
        <section class="page-section portfolio" id="portfolio">
            <div class="container">
                <div class="row">
                    {{#each sensors}}
                    <div class="col-md-6 col-lg-4">
                        <div class="portfolio-item mx-auto">
                            <div class="card text-center text-primary">
                                <div class="card-header p-0">
                                    <span><i class="{{this.icon}}"></i></span></br>
                                </div>
                                <div class="card-body">
                                    <div class="m-0">
                                        <div class="container">
                                            <div class="GaugeMeter float-left" id="GaugeMeter_1" data-used="{{this.temp}}"
                                                data-min="0" data-total="40" data-text="{{this.temp}}&#8451" data-style="Arch"
                                                data-theme="Green-Gold-Red" data-label="Temperature" data-showvalue="10"></div>
                                            <div class="GaugeMeter float-right" id="GaugeMeter_2" data-used="{{this.humidity}}"
                                                data-min="0" data-total="100" data-text='{{this.humidity}}&#8274' data-style="Arch"
                                                data-theme="Green-Gold-Red" data-label="Humidity"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="container p-2">
                                    {{#each this.relays}}
                                    <div class="container ">
                                        <div class="custom-control custom-switch">
                                            <input type="checkbox" class="custom-control-input " id="{{this.id}}"
                                                onclick="switchHandler(this)" {{#if this.status}}checked{{/if}} {{#if this.webhook}}
                                                value="{{this.webhook}}" {{else}} value="" {{/if}}>
                                            <label class="custom-control-label" for="{{this.id}}"><span>{{this.name}}</span></label>
                                        </div>
                                    </div>
                                    {{/each}}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                    <div class="col-md-6 col-lg-4">
                    <div class="portfolio-item mx-auto">
                        <div class="card text-center text-primary">
                            <div class="card-header p-0">
                                <span><i>Daily temperature</i>
                                </span></br>
                                <input type="text" class="border-0 bg-primary rounded histCalendar mb-2 text-center text-light " id="dailyTempHist" readonly="true"  value="{{tempHistory.date}}"
                                    onclick="calendarHandler(this)" /></br>
                                <span class="mb-2 p-1 rounded"
                                    style="border:1px solid red ;background-color:rgba(255,226,0,0.19);color:red;display: none;"></span>
                            </div>
                            <div class="card-body">
                                <div class="m-0">
                                    <div class="container">
                        
                                    </div>
                                </div>
                            </div>
                            <div class="container p-2" style=" height:40vh; width:100%">
                                <canvas id="temperatureHistoryChart"></canvas>
                            </div>
                        </div>
                        </div>
                </div>
                    <div class="col-md-6 col-lg-4">
                        <div class="portfolio-item mx-auto">
                            <div class="card text-center text-primary">
                                <div class="card-header p-0">
                                    <span><i>Daily humidity</i></span></br>
                                    <input type="text" class="border-0 bg-primary rounded histCalendar mb-2 text-center text-light " id="dailyHumHist" readonly="true"  value="{{tempHistory.date}}" onclick="calendarHandler(this)"/></br>
                                    <span class="p-1 rounded" style="border:1px solid red ;background-color:rgba(255,226,0,0.19);color:red;display: none;"></span>
                                </div>
                                <div class="card-body">
                                    <div class="m-0">
                                        <div class="container">

                                        </div>
                                    </div>
                                </div>
                                <div class="container p-2" style=" height:40vh; width:100%">
                                    <canvas id="humidityHistoryChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </header>
</div>
<script src="/js/GaugeMeter.js"></script>
<script>
    $(document).ready(function(){
        $(".GaugeMeter").gaugeMeter();
    });
    
        let calendarId;
        function switchHandler(elem) {

            blockControl(elem);

            $.ajax({
                method: "POST",
                url: "/control",
                data: { "relayId": elem.id, "status": elem.checked, "switch": elem.value }
            }).done(function () {
                unblockControl(elem)
            })
        }

    function updateHistoryChart(chart, dataset) {

        chart.data.labels = dataset.history.sensorLabels

        if (dataset.temp) {
            chart.data.datasets[0].data = dataset.history.tempData
            chart.data.datasets[1].data = dataset.history.weatherTempData
        }
        else if (dataset.hum) {
            chart.data.datasets[0].data = dataset.history.humidityData
            chart.data.datasets[1].data = dataset.history.weatherHumData
        }
        chart.update();
    }

        function calendarHandler(elem) {
            calendarId = elem
        }

        $(function () {
            $('.histCalendar').daterangepicker({
                singleDatePicker: true,
                showDropdowns: true,
                minYear: 2019,
                maxYear: parseInt(moment().format('YYYY'), 10)
            }, function (start, end, label) {
                

                let date = new Date(start._d)
                let filteredTime = `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;
                
            blockControl(calendarId);

                $.ajax({
                    method: "POST",
                    url: "/control/history",
                    data: { "date": filteredTime , "calendarId":calendarId.id}
                }).done(function (newChart) {

                    
                    if (newChart.found){
                       
                        if (newChart.calendar == "dailyTempHist") {
                            newChart["temp"] = true;
                            updateHistoryChart(monthlyTempChart,newChart)
                        }
                        else if (newChart.calendar == "dailyHumHist") {
                            newChart["hum"] = true;
                            updateHistoryChart(monthlyHumChart,newChart)
                        }
                    }else{
                         
                        $($(`#${newChart.calendar}`).parent().children()[4]).html(newChart.message);
                        $($(`#${newChart.calendar}`).parent().children()[4]).show();

                        setTimeout(()=>{
                            $($(`#${newChart.calendar}`).parent().children()[4]).hide('slow');
                        },1500)
                    }
                    unblockControl(calendarId)
                })
            });
        });
{{!-- DE CREAT MEDTODA DE POST CU PRELUARE OBIECT DIN DB SI UPDATE CHART --}}
</script>
<script src="/js/chart.js"></script>
<script>
    
    var ctxTempGraph = document.getElementById('temperatureHistoryChart');
    var monthlyTempChart = new Chart(ctxTempGraph, {
        type: 'bar',
        data: {
            labels: "{{tempHistory.sensorLabels}}".split(","),
            datasets: [{
                label: "Sensors",
                data: [{{tempHistory.tempData}}],
                backgroundColor:'rgba(255,226,0,0.19)',
                borderColor: 'rgb(255,238,0)',
                borderWidth: 1
            },
                {
                    label: "Weather",
                    data: [{{tempHistory.weatherTempData}}],
                    backgroundColor:'rgba(0,211,255,0.17)',
                    borderColor: 'rgba(0,211,255,0.78)',
                    borderWidth: 1
                }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    offset: true,
                    ticks: {
                        beginAtZero: true,
                        minRotation: 0,
                        maxRotation: 50,
                        mirror: false,
                        padding: 0,
                        reverse: false,
                        display: true,
                        autoSkip: false,
                        autoSkipPadding: 0,
                        labelOffset: 0
                    },
                    gridLines: {
                        display: false
                    }
                }],
                xAxes: [{
                    gridLines: {
                        display: false
                    }
                }]
            }
        }
    });

    var ctxHumGraph = document.getElementById('humidityHistoryChart');
    var monthlyHumChart = new Chart(ctxHumGraph, {
        type: 'bar',
        data: {
            labels: "{{tempHistory.sensorLabels}}".split(","),
            datasets: [{
                label: "Sensors",
                data: [{{tempHistory.humidityData}}],
                backgroundColor:'rgba(0,188,0,0.19)',
                borderColor: 'rgb(0,188,0)',
                borderWidth: 1
            },
                {
                    label: "Weather",
                    data: [{{tempHistory.weatherHumData}}],
                    backgroundColor:'rgba(0,211,255,0.17)',
                    borderColor: 'rgba(0,211,255,0.78)',
                    borderWidth: 1
                }]
        },
        options: {
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    offset: true,
                    ticks: {
                        beginAtZero: true,
                        minRotation: 0,
                        maxRotation: 50,
                        mirror: false,
                        padding: 0,
                        reverse: false,
                        display: true,
                        autoSkip: false,
                        autoSkipPadding: 0,
                        labelOffset: 0
                    },
                    gridLines: {
                        display: false
                    }
                }],
                xAxes: [{
                    gridLines: {
                        display: false
                    }
                }]
            }
        }
    });

    // options: {
    //     maintainAspectRatio: false,
    //             scales: {
    //         yAxes: [{
    //             offset: true,
    //             ticks: {
    //                 beginAtZero: true,
    //                 minRotation: 0,
    //                 maxRotation: 50,
    //                 mirror: false,
    //                 padding: 0,
    //                 reverse: false,
    //                 display: true,
    //                 autoSkip: false,
    //                 autoSkipPadding: 0,
    //                 labelOffset: 0
    //             },
    //             gridLines: {
    //                 display: false
    //             }
    //         }],
    //                 xAxes: [{
    //             gridLines: {
    //                 display: false
    //             }
    //         }]
    //     }
    // }
</script>

